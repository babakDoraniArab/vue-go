# name: CI/CD

# on:
#   pull_request: { branches: ["*"] }
#   push:
#     branches:
#       - "+([0-9])?(.{+([0-9]),x}).x"
#       - main

# jobs:
#   # build:
#   #   runs-on: ubuntu-latest
#   #   env:
#   #     APP_NAME: SIR
#   #     SERVER_HOST: ${{ secrets.SERVER_HOST }}
#   #     SERVER_PORT: ${{ secrets.SERVER_PORT }}
#   #     DB_USERNAME: ${{ secrets.DB_USERNAME }}
#   #     DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#   #     DB_HOST: ${{ secrets.DB_HOST }}
#   #     DB_PORT: ${{ secrets.DB_PORT }}
#   #     DB_NAME: ${{ secrets.DB_NAME }}
#   #   steps:
#   #     - uses: actions/checkout@v3
#   #     - name: Set up Go
#   #       uses: actions/setup-go@v4
#   #       with:
#   #         go-version: '1.20'
#   #     - name: Build
#   #       run: go build -ldflags="-X 'main.appName=${APP_NAME}' -X 'main.serverHost=${SERVER_HOST}' -X 'main.serverPort=${SERVER_PORT}' -X 'main.dbUsername=${DB_USERNAME}' -X 'main.dbPassword=${DB_PASSWORD}' -X 'main.dbHost=${DB_HOST}' -X 'main.dbPort=${DB_PORT}' -X 'main.dbName=${DB_NAME}'"
#   #     - name: Test
#   #       run: go test ./...
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - run: echo Build
#       - run: echo "#####################################"



#   test:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - run: echo Test



#   release:
#       needs: test
#       runs-on: ubuntu-latest
#       permissions:
#         contents: write
#         issues: write
#         pull-requests: write
#       steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Semantic Release
#         uses: cycjimmy/semantic-release-action@v3
#         id: semantic
#         with:
#           semantic_version: 18

#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          
#       - name: Do something when a new release published
#         # if: steps.semantic.outputs.new_release_published == 'true'
#         run: |
#           echo ${{ steps.semantic.outputs.new_release_version }}
#           echo ${{ steps.semantic.outputs.new_release_major_version }}
#           echo ${{ steps.semantic.outputs.new_release_minor_version }}
#           echo ${{ steps.semantic.outputs.new_release_patch_version }}
#           echo ${{ steps.semantic.outputs.last_release_version }}
          
#       outputs:
#          output1: ${{ steps.semantic.outputs.new_release_version }}
#          new_release_major_version : ${{ steps.semantic.outputs.new_release_major_version }}
#          new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
#          new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version}}

#   build-docker:
#     needs: release
#     runs-on: ubuntu-latest 
#     steps:
      
#       -
#         name: Checkout
#         uses: actions/checkout@v3
#       - 
#         name: check output semantic
#         env:
#           OUTPUT1: ${{needs.release.outputs.output1}}
#         run : echo "$OUTPUT1"
#       -
#         name: Docker meta
#         id: meta
#         uses: docker/metadata-action@v4
#         env:
#           OUTPUT1: ${{needs.release.outputs.output1}}
#         with:
#           # list of Docker images to use as base name for tags
#           images: |
#             bablido/my-docker-image
#           # generate Docker tags based on the following events/attributes
#           tags: |
#             type=semver,pattern={{version}},value=${{needs.release.outputs.output1}}
      
#       # there are different version that we can use 
#       # https://github.com/docker/metadata-action#typesemver
#       # # type=schedule
#       # # type=ref,event=branch
#       # # type=ref,event=pr
#       # type=semver,pattern=${{ steps.semantic.outputs.new_release_version }}
#       # type=semver,pattern=${{ steps.semantic.outputs.new_release_major_version }}.${{ steps.semantic.outputs.new_release_minor_version }}
#       # type=semver,pattern=${{ steps.semantic.outputs.new_release_major_version }}
#       # type=sha

#       -
#         name: Set up QEMU
#         uses: docker/setup-qemu-action@v2
#       -
#         name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#       -
#         name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       -
#         name: Build and push
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: ${{ github.event_name != 'pull_request' }}
#           tags:  ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}